# Azure Pipelines CloudGuard Serverless Demo

trigger:
  - master

stages:
- stage: Build
  jobs:
  - job: BuildLambdaFunction
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec:  '12.x'
        displayName: 'Iinstall Node.js'
      - task: DockerInstaller@0
        displayName: Docker Installer
      - script: |
          npm install
          npm install -g https://artifactory.app.protego.io/cloudguard-serverless-plugin.tgz
          rm -rf ./__tests__
          npm prune --production
        displayName: 'NPM install, Cloudguard Workload Plugin install'
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'Visual Studio Professional(1)(0410d51b-d8ac-40ba-84c1-f74a3c48301b)'
          KeyVaultName: 'RoloVault'
          SecretsFilter: 'cloudguardAccessToken'
          RunAsPreJob: false
      - script: |
          export D9TOKEN=$(cloudguardAccessToken)
          echo {\"cloudguardAccessToken\":\"$D9TOKEN\"} >> cloudguard-config.json
        displayName: 'Setup Dome9 Credentials'
      - task: AWSShellScript@1
        inputs:
          awsCredentials: 'rolandop-cp'
          regionName: $(AWS_REGION)
          scriptType: 'inline'
          inlineScript: |
            cloudguard proact -m template.yml
            cloudguard fsp -C template.yml --region $(AWS_REGION)
            aws cloudformation package --template template.protected.yml --s3-bucket $(S3_BUCKET_BUILD) --output-template output.template.yml
        displayName: 'Run CloudGuard Workload Protection and Enable FSP'
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          replaceExistingArchive: true
      - task: S3Upload@1
        inputs:
          awsCredentials: 'rolandop-cp'
          regionName: 'us-east-1'
          bucketName: $(S3_BUCKET_ARTIFACTS)
          sourceFolder: '$(Build.ArtifactStagingDirectory)'
          globExpressions: '$(Build.BuildId).zip'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'cloudguard-lambda'
          publishLocation: 'pipeline'
- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: CloudGuardLambdaDev
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'cloudguard-lambda'
              targetPath: '$(Pipeline.Workspace)'
          - task: AWSShellScript@1
            inputs:
              awsCredentials: 'rolandop-cp'
              regionName: $(AWS_REGION)
              scriptType: 'inline'
              inlineScript: |
                aws cloudformation deploy --template-file output.template.yml --stack-name awssamazuredevops --capabilities CAPABILITY_IAM --parameter-overrides ServiceCount=1
            displayName: 'Updating CloudFormation stack'
